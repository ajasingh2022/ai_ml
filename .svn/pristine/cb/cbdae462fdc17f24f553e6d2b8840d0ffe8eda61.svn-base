package com.sesp.zera.utils;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;
import android.os.Build;
import android.os.SystemClock;
import android.os.storage.StorageManager;
import android.os.storage.StorageVolume;
import android.util.Log;

import com.sesp.zera.usbserial.CDCSerialDevice;
import com.sesp.zera.usbserial.UsbSerialDevice;
import com.sesp.zera.usbserial.UsbSerialInterface;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;

/**
 * Created by samdasgu on 2/24/2018.
 */
public class UsbSerialUtil {

    private static UsbSerialUtil sInstance;

    public static final String ERROR_USB_NOT_SUPPORTED = "ERROR_USB_NOT_SUPPORTED";
    public static final String ERROR_CDC_DRIVER_NOT_WORKING = "ERROR_CDC_DRIVER_NOT_WORKING";
    public static final String SERIAL_USB_READY = "SERIAL_USB_READY";
    public static final String ERROR_USB_DEVICE_NOT_WORKING = "ERROR_USB_DEVICE_NOT_WORKING";
    public static final int BAUD_RATE = 9600;

    private Context mContext;
    private UsbManager mUsbManager;
    private UsbDevice mDevice;
    private UsbDeviceConnection mConnection;
    private UsbSerialDevice mSerialPort;
    private PendingIntent mPermissionIntent;

    private UsbDeviceListener responseListener;
    private static final String TAG = UsbSerialUtil.class.getSimpleName();
    private boolean serialPortConnected;


    private UsbSerialUtil(Context context, UsbDeviceListener listener) {
        init(context, listener);
    }

    public static synchronized UsbSerialUtil getInstance(Context context, UsbDeviceListener listener) {
        if (sInstance == null) {
            sInstance = new UsbSerialUtil(context, listener);
        } else {
            sInstance.init(context, listener);
        }
        return sInstance;
    }


    private void init(Context context, UsbDeviceListener listener) {
        this.mContext = context;
        this.responseListener = listener;
        this.mUsbManager = (UsbManager) mContext.getSystemService(Context.USB_SERVICE);
        this.mPermissionIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(ACTION_USB_PERMISSION), 0);
        setUpFilter();
    }

    private void setUpFilter() {
        Log.d(TAG, "Setting up intent filter for Broadcast");
        IntentFilter filter = new IntentFilter();
        filter.addAction(ACTION_USB_PERMISSION);
        filter.addAction(ACTION_USB_ATTACHED);
        filter.addAction(ACTION_USB_DETACHED);
        mContext.registerReceiver(mUsbReceiver, filter);
    }

    /*
     * Request user permission. The response will be received in the BroadcastReceiver
     */
    private void requestUserPermission() {
        if(!mUsbManager.hasPermission(mDevice)) {
            PendingIntent mPendingIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(ACTION_USB_PERMISSION), 0);
            mUsbManager.requestPermission(mDevice, mPendingIntent);
        } else {
            responseListener.onPermissionGranted(true);
            mConnection = mUsbManager.openDevice(mDevice);
        }
    }

    public BroadcastReceiver getmUsbReceiver() {
        return mUsbReceiver;
    }

    /*

       * This function will be called from MainActivity to write data through Serial Port
       */
    public void writeToSerialDevice(byte[] data) {
        if (mSerialPort != null)
            mSerialPort.write(data);
    }


    /*
     * Different notifications from OS will be received here (USB attached, detached, permission responses...)
     * About BroadcastReceiver: http://developer.android.com/reference/android/content/BroadcastReceiver.html
     */
    public static final String ACTION_USB_PERMISSION = "com.skvader.rsp.bst_sep_eon1.android.wo.page.verification.USB_PERMISSION";
    public static final String ACTION_USB_ATTACHED = "android.hardware.usb.action.USB_DEVICE_ATTACHED";
    public static final String ACTION_USB_DETACHED = "android.hardware.usb.action.USB_DEVICE_DETACHED";
    private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (ACTION_USB_PERMISSION.equals(action)) {
                UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
                boolean permissionGranted = intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false);
                if (permissionGranted && device != null) {
                    mConnection = mUsbManager.openDevice(device);
                } else {
                    Log.d(TAG, "permission denied for device " + device);
                }
                if (responseListener != null) {
                    responseListener.onPermissionGranted(true);
                }
            } else if(ACTION_USB_ATTACHED.equals(action)) {
                HashMap<String, UsbDevice> connectedDevices = mUsbManager
                        .getDeviceList();
                if (connectedDevices.isEmpty()) {
                    Log.d(TAG, "No connected device");
                    mDevice = null;
                } else {
                    Log.d(TAG, "Connected device present");
                    for (UsbDevice device : connectedDevices.values()) {
                        mDevice = device;
                    }
                    if (responseListener != null) {
                        responseListener.onDeviceAttached();
                    }
                    if(!mUsbManager.hasPermission(mDevice)) {
                        mUsbManager.requestPermission(mDevice, mPermissionIntent);
                    } else {
                        mConnection = mUsbManager.openDevice(mDevice);
                        if (responseListener != null) {
                            responseListener.onPermissionGranted(true);
                        }
                    }
                    Log.d(TAG, "Device Name ::" + mDevice.getDeviceName());
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                        Log.d(TAG, "Manufacturer Name ::"+mDevice.getManufacturerName());
                        Log.d(TAG, "Product Name ::"+mDevice.getProductName());
                        Log.d(TAG, "Serial Number ::"+mDevice.getSerialNumber());
                    }
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        Log.d(TAG, "Version ::"+mDevice.getVersion());
                    }
                }
            } else if(ACTION_USB_DETACHED.equals(action)) {
                if(mConnection != null){
                    mConnection.close();
                    mConnection=null;
                }

                if(mSerialPort != null){
                    mSerialPort.close();
                    mSerialPort=null;
                }

                mDevice = null;
                serialPortConnected=false;
                if(responseListener != null) {
                    responseListener.onDeviceDetached();
                }
            }
        }
    };
    /**
     * Read data from Serial Device e.g. E600 Meter
     */
    public void readData() {
        if (mSerialPort != null) {
            mSerialPort.readData();
        }
    }

    /**
     * Connect with USB Serial device
     */
    public void connectUsbSerialDevice() {

        if(!serialPortConnected){
            mSerialPort = UsbSerialDevice.createUsbSerialDevice(mDevice, mConnection);
            Log.d(TAG, "connectUsbSerialDevice#### mDevice :: " + mDevice.getDeviceName());
            Log.d(TAG, "connectUsbSerialDevice#### mConnection :: " + mConnection.toString());
            Log.d(TAG, "connectUsbSerialDevice#### mSerialPort :: " + (mSerialPort != null ? mSerialPort.toString() : "NULL"));
            if (mSerialPort != null) {
                Log.d(TAG, "connectUsbSerialDevice#### Trying to open mSerialPort");
                if (mSerialPort.open()) {
                    Log.d(TAG, "connectUsbSerialDevice#### Successfully opened mSerialPort");
                    serialPortConnected = true;
                    mSerialPort.setBaudRate(getBaudRate());
                    mSerialPort.setDataBits(UsbSerialInterface.DATA_BITS_8);
                    mSerialPort.setStopBits(UsbSerialInterface.STOP_BITS_2);
                    mSerialPort.setParity(UsbSerialInterface.PARITY_NONE);

                    mSerialPort.setFlowControl(UsbSerialInterface.FLOW_CONTROL_OFF);
                    mSerialPort.setDTR(true);
                    mSerialPort.setRTS(true);
                    mSerialPort.read(mCallback);
                    //TODO not needed right now
                    //serialPort.getCTS(ctsCallback);
                    //serialPort.getDSR(dsrCallback);

                    // Some Arduinos would need some sleep because firmware wait some time to know whether a new sketch is going
                    // to be uploaded or not
                    try {
                        Thread.sleep(2000); // sleep some. YMMV with different chips.
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectUsbSerialDevice#### EXCEPTION DETAILS :: ", e);
                    }

                    // Everything went as expected. Send an intent to MainActivity
                    Log.d(TAG, "connectUsbSerialDevice#### Everything went as expected ::SERIAL_USB_READY");
                    responseListener.onUsbReady(SERIAL_USB_READY);
                } else {
                    Log.d(TAG, "connectUsbSerialDevice#### Could not open mSerialPort");
                    // Serial port could not be opened, maybe an I/O error or if CDC driver was chosen, it does not really fit
                    // Send an Intent to Main Activity
                    if (mSerialPort instanceof CDCSerialDevice) {
                        Log.d(TAG, "connectUsbSerialDevice#### ERROR_CDC_DRIVER_NOT_WORKING");
                        responseListener.onError(ERROR_CDC_DRIVER_NOT_WORKING);
                    } else {
                        Log.d(TAG, "connectUsbSerialDevice#### ERROR_USB_DEVICE_NOT_WORKING");
                        responseListener.onError(ERROR_USB_DEVICE_NOT_WORKING);
                    }
                }
            } else {
                // No driver for given device, even generic CDC driver could not be loaded
                Log.d(TAG, "connectUsbSerialDevice#### ERROR_USB_NOT_SUPPORTED");
                responseListener.onError(ERROR_USB_NOT_SUPPORTED);
            }
        }
    }
    /**
     * Connect with USB Serial device - E600 Meter
     */
    public void connectUsbSerialDeviceE600Meter() {

        if(!serialPortConnected){
            mSerialPort = UsbSerialDevice.createUsbSerialDevice(mDevice, mConnection, true);
            Log.d(TAG, "connectUsbSerialDevice#### mDevice :: " + mDevice.getDeviceName());
            Log.d(TAG, "connectUsbSerialDevice#### mConnection :: " + mConnection.toString());
            Log.d(TAG, "connectUsbSerialDevice#### mSerialPort :: " + (mSerialPort != null ? mSerialPort.toString() : "NULL"));
            if (mSerialPort != null) {
                Log.d(TAG, "connectUsbSerialDevice#### Trying to open mSerialPort");
                if (mSerialPort.open()) {
                    Log.d(TAG, "connectUsbSerialDevice#### Successfully opened mSerialPort");
                    serialPortConnected = true;
                    mSerialPort.setBaudRate(300);
                    mSerialPort.setDataBits(UsbSerialInterface.DATA_BITS_7);
                    mSerialPort.setStopBits(UsbSerialInterface.STOP_BITS_1);
                    mSerialPort.setParity(UsbSerialInterface.PARITY_EVEN);

                    mSerialPort.setFlowControl(UsbSerialInterface.FLOW_CONTROL_RTS_CTS);
                    // mSerialPort.setDTR(true);
                    mSerialPort.setRTS(true);   // if not work, then use FLOW_CONTROL_DSR_DTR and setDTR(true);
                    mSerialPort.read(mCallback);

                    // Some Arduinos would need some sleep because firmware wait some time to know whether a new sketch is going
                    // to be uploaded or not
                    SystemClock.sleep(2000);

                    // Everything went as expected. Send an intent to MainActivity
                    Log.d(TAG, "connectUsbSerialDevice#### Everything went as expected ::SERIAL_USB_READY");
                    responseListener.onUsbReady(SERIAL_USB_READY);
                } else {
                    Log.d(TAG, "connectUsbSerialDevice#### Could not open mSerialPort");
                    // Serial port could not be opened, maybe an I/O error or if CDC driver was chosen, it does not really fit
                    // Send an Intent to Main Activity
                    if (mSerialPort instanceof CDCSerialDevice) {
                        Log.d(TAG, "connectUsbSerialDevice#### ERROR_CDC_DRIVER_NOT_WORKING");
                        responseListener.onError(ERROR_CDC_DRIVER_NOT_WORKING);
                    } else {
                        Log.d(TAG, "connectUsbSerialDevice#### ERROR_USB_DEVICE_NOT_WORKING");
                        responseListener.onError(ERROR_USB_DEVICE_NOT_WORKING);
                    }
                }
            } else {
                // No driver for given device, even generic CDC driver could not be loaded
                Log.d(TAG, "connectUsbSerialDevice#### ERROR_USB_NOT_SUPPORTED");
                responseListener.onError(ERROR_USB_NOT_SUPPORTED);
            }
        }
    }


    /**
     * Fetch Data from USB Mass storage
     */
    public void readDataFromMassStorageDevice() {
        Field pathField = null;
        File pathObject = null;
        String result = null;
        StorageManager storageManager = (StorageManager) mContext.getSystemService(Context.STORAGE_SERVICE);
        Method getVolumeListMethod = null;
        StorageVolume storageVolumeMassStorage = null;
        try {
            getVolumeListMethod = StorageManager.class.getDeclaredMethod("getVolumeList");
            StorageVolume[] storageVolumeList = (StorageVolume[]) getVolumeListMethod.invoke(storageManager);
            for(StorageVolume storageVolume : storageVolumeList) {
                String storageVolumeDescription = storageVolume.getDescription(mContext);
                Log.d(UsbSerialUtil.class.getSimpleName(), "Storage Volume description :: " + storageVolumeDescription);
                if(storageVolumeDescription != null && storageVolumeDescription.contains("USB")) {
                    storageVolumeMassStorage = storageVolume;
                    break;
                }
            }
            pathField = StorageVolume.class.getDeclaredField("mPath");
            pathField.setAccessible(true);
            if(storageVolumeMassStorage != null) {
                pathObject = (File) pathField.get(storageVolumeMassStorage);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (pathObject != null && pathObject.exists() && pathObject.isDirectory()) {
            File zeraTestFileDirectory = new File(pathObject.getAbsolutePath() + "/result/");
            if (zeraTestFileDirectory.exists()) {
                try {
                    File zeraFile = new File(zeraTestFileDirectory.getAbsolutePath() + "/RESULT.XML");

                    BufferedReader bufferedReader = new BufferedReader(new FileReader(zeraFile));

                    StringBuilder stringBuffer = new StringBuilder();
                    String line = null;
                    while ((line = bufferedReader.readLine()) != null) {
                        stringBuffer.append(line + "\n");
                    }
                    bufferedReader.close();
                    result = stringBuffer.toString();
                    // send data to client

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        if (responseListener != null)
            responseListener.onResponseReceived(result);

    }

    private static int getBaudRate() {
        return BAUD_RATE;
    }

    /**
     * Set baud rate
     * @param baudRate
     */
    public void setBaudRate(final int baudRate) {
        if(mSerialPort != null) {
            mSerialPort.setBaudRate(baudRate);
        }
    }
    /*
    *  Data received from serial port will be received here. Just populate onReceivedData with your code
    *  In this particular example. byte stream is converted to String and send to UI thread to
    *  be treated there.
    */
    private UsbSerialInterface.UsbReadCallback mCallback = new UsbSerialInterface.UsbReadCallback() {
        @Override
        public void onReceivedData(String data) {
            if (responseListener != null)
                responseListener.onResponseReceived(data);
        }

        @Override
        public void onReceivedData(byte[] arg0) {

                if (responseListener != null)
                    responseListener.onResponseReceived(arg0);

        }

    };
}
